import sys
import subprocess
import webbrowser
from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QPushButton,
    QLabel, QTabWidget, QFileDialog, QInputDialog, QDialog, QTextEdit, QMessageBox
)
from PySide6.QtCore import Qt, QThread, Signal

# Threaded command runner
class CommandThread(QThread):
    result = Signal(str, str)

    def __init__(self, command):
        super().__init__()
        self.command = command

    def run(self):
        proc = subprocess.run(self.command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        self.result.emit(proc.stdout, proc.stderr)

# Output dialog
class OutputDialog(QDialog):
    def __init__(self, title, output, error, parent=None):
        super().__init__(parent)
        self.setWindowTitle(title)
        layout = QVBoxLayout(self)
        txt = QTextEdit(self)
        txt.setReadOnly(True)
        txt.setText(output if output else "")
        if error:
            txt.append("\n--- STDERR ---\n" + error)
        layout.addWidget(txt)
        btn = QPushButton("Close")
        btn.clicked.connect(self.accept)
        layout.addWidget(btn)

# Main app window
class AlphaXUltimate(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("ALPHA-X Ultimate for Kali Linux")
        self.setMinimumSize(1200, 700)
        self.tabs = QTabWidget()
        self.setCentralWidget(self.tabs)
        self.init_tabs()

    def init_tabs(self):
        self.tabs.addTab(self.system_tab(), "System")
        self.tabs.addTab(self.network_tab(), "Network")
        self.tabs.addTab(self.web_tab(), "Web App")
        self.tabs.addTab(self.cracking_tab(), "Cracking")
        self.tabs.addTab(self.forensics_tab(), "Forensics")
        self.tabs.addTab(self.reverse_tab(), "Reverse Engr.")
        self.tabs.addTab(self.social_tab(), "Social Engr.")
        self.tabs.addTab(self.misc_tab(), "Misc Tools")

    # --- Tab Definitions ---

    def system_tab(self):
        w = QWidget()
        lay = QVBoxLayout(w)
        lay.addWidget(QLabel("<h3>System Tools</h3>"))

        btn_update = QPushButton("Update & Upgrade System")
        btn_update.clicked.connect(lambda: self.run_command("sudo apt update && sudo apt full-upgrade -y", "System Upgrade"))
        lay.addWidget(btn_update)

        btn_hosts = QPushButton("Edit /etc/hosts")
        btn_hosts.clicked.connect(lambda: subprocess.run("xdg-open /etc/hosts", shell=True))
        lay.addWidget(btn_hosts)

        btn_services = QPushButton("List Services (systemctl)")
        btn_services.clicked.connect(lambda: self.run_command("systemctl list-units --type=service --all", "Services"))
        lay.addWidget(btn_services)

        btn_logs = QPushButton("View System Logs")
        btn_logs.clicked.connect(lambda: self.run_command("journalctl -n 100", "System Logs"))
        lay.addWidget(btn_logs)

        btn_ssh = QPushButton("Quick SSH Connect")
        btn_ssh.clicked.connect(self.ssh_connect)
        lay.addWidget(btn_ssh)

        return w

    def network_tab(self):
        w = QWidget()
        lay = QVBoxLayout(w)
        lay.addWidget(QLabel("<h3>Network & Wireless Tools</h3>"))

        btn_nmap = QPushButton("Nmap Quick Scan")
        btn_nmap.clicked.connect(self.nmap_dialog)
        lay.addWidget(btn_nmap)

        btn_airmon = QPushButton("Start/Stop Monitor Mode (airmon-ng)")
        btn_airmon.clicked.connect(self.airmon_dialog)
        lay.addWidget(btn_airmon)

        btn_airodump = QPushButton("Airodump-ng WiFi Scan")
        btn_airodump.clicked.connect(self.airodump_dialog)
        lay.addWidget(btn_airodump)

        btn_tcpdump = QPushButton("Sniff Packets (tcpdump)")
        btn_tcpdump.clicked.connect(self.tcpdump_dialog)
        lay.addWidget(btn_tcpdump)

        btn_wireshark = QPushButton("Launch Wireshark")
        btn_wireshark.clicked.connect(lambda: subprocess.Popen("wireshark", shell=True))
        lay.addWidget(btn_wireshark)

        btn_netinfo = QPushButton("Show Interfaces")
        btn_netinfo.clicked.connect(lambda: self.run_command("ip addr", "Interfaces"))
        lay.addWidget(btn_netinfo)

        return w

    def web_tab(self):
        w = QWidget()
        lay = QVBoxLayout(w)
        lay.addWidget(QLabel("<h3>Web App Testing</h3>"))

        btn_burp = QPushButton("Launch BurpSuite")
        btn_burp.clicked.connect(lambda: subprocess.Popen("burpsuite", shell=True))
        lay.addWidget(btn_burp)

        btn_zap = QPushButton("Launch OWASP ZAP")
        btn_zap.clicked.connect(lambda: subprocess.Popen("owasp-zap", shell=True))
        lay.addWidget(btn_zap)

        btn_sqlmap = QPushButton("SQLMap Scan URL")
        btn_sqlmap.clicked.connect(self.sqlmap_dialog)
        lay.addWidget(btn_sqlmap)

        btn_nikto = QPushButton("Nikto Web Server Scan")
        btn_nikto.clicked.connect(self.nikto_dialog)
        lay.addWidget(btn_nikto)

        btn_wpscan = QPushButton("WPScan (Wordpress)")
        btn_wpscan.clicked.connect(self.wpscan_dialog)
        lay.addWidget(btn_wpscan)

        return w

    def cracking_tab(self):
        w = QWidget()
        lay = QVBoxLayout(w)
        lay.addWidget(QLabel("<h3>Password / Hash Cracking</h3>"))

        btn_john = QPushButton("John the Ripper (select hash file)")
        btn_john.clicked.connect(self.john_dialog)
        lay.addWidget(btn_john)

        btn_hashcat = QPushButton("Hashcat (select hash file)")
        btn_hashcat.clicked.connect(self.hashcat_dialog)
        lay.addWidget(btn_hashcat)

        btn_hydra = QPushButton("Hydra (brute force service)")
        btn_hydra.clicked.connect(self.hydra_dialog)
        lay.addWidget(btn_hydra)

        return w

    def forensics_tab(self):
        w = QWidget()
        lay = QVBoxLayout(w)
        lay.addWidget(QLabel("<h3>Forensics & Memory Analysis</h3>"))

        btn_volatility = QPushButton("Volatility (memory forensics)")
        btn_volatility.clicked.connect(self.volatility_dialog)
        lay.addWidget(btn_volatility)

        btn_autopsy = QPushButton("Launch Autopsy")
        btn_autopsy.clicked.connect(lambda: subprocess.Popen("autopsy", shell=True))
        lay.addWidget(btn_autopsy)

        btn_binwalk = QPushButton("Binwalk (select file)")
        btn_binwalk.clicked.connect(self.binwalk_dialog)
        lay.addWidget(btn_binwalk)

        return w

    def reverse_tab(self):
        w = QWidget()
        lay = QVBoxLayout(w)
        lay.addWidget(QLabel("<h3>Reverse Engineering</h3>"))

        btn_r2 = QPushButton("Radare2 (select binary)")
        btn_r2.clicked.connect(self.r2_dialog)
        lay.addWidget(btn_r2)

        btn_ghidra = QPushButton("Launch Ghidra")
        btn_ghidra.clicked.connect(lambda: subprocess.Popen("ghidraRun", shell=True))
        lay.addWidget(btn_ghidra)

        btn_cutter = QPushButton("Launch Cutter")
        btn_cutter.clicked.connect(lambda: subprocess.Popen("cutter", shell=True))
        lay.addWidget(btn_cutter)

        return w

    def social_tab(self):
        w = QWidget()
        lay = QVBoxLayout(w)
        lay.addWidget(QLabel("<h3>Social Engineering</h3>"))

        btn_setoolkit = QPushButton("Launch SEToolkit")
        btn_setoolkit.clicked.connect(lambda: subprocess.Popen("setoolkit", shell=True))
        lay.addWidget(btn_setoolkit)

        return w

    def misc_tab(self):
        w = QWidget()
        lay = QVBoxLayout(w)
        lay.addWidget(QLabel("<h3>Miscellaneous Tools</h3>"))

        btn_clip = QPushButton("Copy/Paste Base64/Hex/Hash")
        btn_clip.clicked.connect(self.clipboard_dialog)
        lay.addWidget(btn_clip)

        btn_screenshot = QPushButton("Take Screenshot")
        btn_screenshot.clicked.connect(lambda: subprocess.Popen("gnome-screenshot", shell=True))
        lay.addWidget(btn_screenshot)

        btn_fav = QPushButton("Add Custom Command")
        btn_fav.clicked.connect(self.custom_command_dialog)
        lay.addWidget(btn_fav)

        return w

    # --- Dialogs and Commands ---

    def run_command(self, command, title):
        self.thread = CommandThread(command)
        self.thread.result.connect(lambda out, err: self.show_output(title, out, err))
        self.thread.start()

    def show_output(self, title, output, error):
        dlg = OutputDialog(title, output, error, self)
        dlg.exec()

    def nmap_dialog(self):
        target, ok = QInputDialog.getText(self, "Nmap", "Target IP/host:")
        if ok and target:
            self.run_command(f"nmap -A {target}", f"Nmap Scan: {target}")

    def airmon_dialog(self):
        iface, ok = QInputDialog.getText(self, "airmon-ng", "WiFi Interface (e.g. wlan0):")
        if ok and iface:
            mode, ok2 = QInputDialog.getItem(self, "Mode", "Action:", ["Start Monitor", "Stop Monitor"], 0, False)
            if ok2:
                cmd = f"sudo airmon-ng {'start' if mode=='Start Monitor' else 'stop'} {iface}"
                self.run_command(cmd, f"airmon-ng: {mode} {iface}")

    def airodump_dialog(self):
        iface, ok = QInputDialog.getText(self, "airodump-ng", "WiFi Monitor Interface (e.g. wlan0mon):")
        if ok and iface:
            self.run_command(f"sudo airodump-ng {iface}", f"Airodump-ng: {iface}")

    def tcpdump_dialog(self):
        iface, ok = QInputDialog.getText(self, "tcpdump", "Interface (e.g. eth0):")
        if ok and iface:
            self.run_command(f"sudo tcpdump -i {iface} -c 100", f"tcpdump: {iface}")

    def sqlmap_dialog(self):
        url, ok = QInputDialog.getText(self, "SQLMap", "Target URL:")
        if ok and url:
            self.run_command(f"sqlmap -u '{url}' --batch --banner", f"SQLMap: {url}")

    def nikto_dialog(self):
        url, ok = QInputDialog.getText(self, "Nikto", "Target URL or IP:")
        if ok and url:
            self.run_command(f"nikto -h '{url}'", f"Nikto: {url}")

    def wpscan_dialog(self):
        url, ok = QInputDialog.getText(self, "WPScan", "WordPress URL:")
        if ok and url:
            self.run_command(f"wpscan --url {url}", f"WPScan: {url}")

    def john_dialog(self):
        file, _ = QFileDialog.getOpenFileName(self, "Select Hash File")
        if file:
            self.run_command(f"john {file}", f"John the Ripper: {file}")

    def hashcat_dialog(self):
        file, _ = QFileDialog.getOpenFileName(self, "Select Hash File")
        if file:
            mode, ok = QInputDialog.getText(self, "Hashcat", "Hash mode (e.g. 0=MD5, 1000=NTLM, etc.):")
            wordlist, _ = QFileDialog.getOpenFileName(self, "Select Wordlist")
            if ok and mode and wordlist:
                self.run_command(f"hashcat -m {mode} {file} {wordlist}", f"Hashcat: {file}")

    def hydra_dialog(self):
        service, ok = QInputDialog.getText(self, "Hydra", "Service (e.g. ssh, ftp):")
        target, ok2 = QInputDialog.getText(self, "Hydra", "Target IP/host:")
        userlist, _ = QFileDialog.getOpenFileName(self, "Userlist file")
        passlist, _ = QFileDialog.getOpenFileName(self, "Passlist file")
        if ok and ok2 and userlist and passlist:
            self.run_command(f"hydra -L {userlist} -P {passlist} {target} {service}", f"Hydra: {service}@{target}")

    def volatility_dialog(self):
        memfile, _ = QFileDialog.getOpenFileName(self, "Select Memory Image")
        if memfile:
            self.run_command(f"volatility -f {memfile} windows.info", f"Volatility: {memfile}")

    def binwalk_dialog(self):
        file, _ = QFileDialog.getOpenFileName(self, "Select File")
        if file:
            self.run_command(f"binwalk {file}", f"Binwalk: {file}")

    def r2_dialog(self):
        binary, _ = QFileDialog.getOpenFileName(self, "Select Binary/File")
        if binary:
            self.run_command(f"r2 -A {binary}", f"Radare2: {binary}")

    def ssh_connect(self):
        host, ok = QInputDialog.getText(self, "SSH", "user@host:")
        if ok and host:
            subprocess.Popen(f"gnome-terminal -- ssh {host}", shell=True)

    def clipboard_dialog(self):
        dlg = QDialog(self)
        dlg.setWindowTitle("Clipboard Tools")
        lay = QVBoxLayout(dlg)
        txt = QTextEdit()
        lay.addWidget(QLabel("Paste or enter text (base64/hex/hashes):"))
        lay.addWidget(txt)
        btn_copy = QPushButton("Copy to Clipboard")
        btn_copy.clicked.connect(lambda: QApplication.clipboard().setText(txt.toPlainText()))
        lay.addWidget(btn_copy)
        btn_close = QPushButton("Close")
        btn_close.clicked.connect(dlg.accept)
        lay.addWidget(btn_close)
        dlg.exec()

    def custom_command_dialog(self):
        cmd, ok = QInputDialog.getText(self, "Custom Command", "Enter shell command to run:")
        if ok and cmd:
            self.run_command(cmd, f"Custom Command: {cmd}")

def main():
    app = QApplication(sys.argv)
    win = AlphaXUltimate()
    win.show()
    sys.exit(app.exec())

if __name__ == "__main__":
    main()